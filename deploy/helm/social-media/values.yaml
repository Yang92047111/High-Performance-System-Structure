global:
  namespace: social-media

backend:
  image:
    repository: social-media-backend
    tag: latest
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 8000
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 50
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

frontend:
  image:
    repository: social-media-frontend
    tag: latest
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 80
  
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

postgres:
  enabled: true
  image:
    repository: postgres
    tag: 15-alpine
  
  service:
    port: 5432
  
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

redis:
  enabled: true
  image:
    repository: redis
    tag: 7-alpine
  
  service:
    port: 6379
  
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

minio:
  enabled: true
  image:
    repository: minio/minio
    tag: latest
  
  service:
    apiPort: 9000
    consolePort: 9001
  
  persistence:
    enabled: true
    size: 20Gi
    storageClass: ""
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

ingress:
  enabled: true
  className: nginx
  host: social-media.local
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "backend-service"

config:
  database:
    name: social_media
  minio:
    bucket: social-media-images

secrets:
  database:
    user: postgres
    password: postgres
  jwt:
    secret: your-super-secret-jwt-key-change-this-in-production
  minio:
    accessKey: minioadmin
    secretKey: minioadmin